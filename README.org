* Reformation

auto-generated docs: https://byu-odh.github.io/reformation/

** Overview
Reformation is a library for building web forms.  More specifically, the library outputs Clojure data structures that can be easily rendered by Reagent.

Forms are specified by a simple, hiccup-like language.  A form is described by a vector, alternating between keywords and attribute maps.  Each pair represents a form element; the element is named by the keyword, and described by the map of attributes.

`render-application` is the main call you'll be making.  It takes two arguments: a vector describing the form, and a place to store the data(see "Data Storage" below).

** A Small Reformation Example
#+BEGIN_SRC clojure
(ns example
 (:require [reformation.core :as rfc]))

(def example-atom (atom nil))
(def easy-form [:example-element {:type :text
                                   :label "Enter some text here"}
		:example-element2 {:type :checkbox
 		                   :label "Is it true?"}])
(defn form-component []
  [:div (rfc/render-application easy-form example-atom)])
#+END_SRC

![What it looks like](docs/simpleform.png)


** Data Storage
Where does the data live?

*** An Atom
 =render-application= can take an atom as a second argument and keep user input there.  The atom should either contain =nil= or a map.

*** Custom Storage
 If you have more specific needs (a front-end db, etc), instead of an atom, you can pass =render-application= a map containing read and write functions for Reformation to use, under the keys =:READ= and =:WRITE=.  The function under =:READ= should take one argument: a vector of keys representing a path as in =get-in=.  The function under =:UPDATE= should take =[path new-val-f]=, where =new-val-f= is a zero-argument function that returns the new value.  

#+BEGIN_SRC clojure
(rfc/render-application test-form {:READ (partial get-in @my-atom)
                                   :UPDATE (partial swap! my-atom update-in)})
#+END_SRC

** Multitables and Toggleboxes
Reformation includes two constructs we've found to be particularly useful:  "multitables" and "toggleboxes."

*** Multitables
Multitables are for when you're not sure how many items the user may need/want to include---when they might list multiple expenses, reasons, referrals, etc.

*** Toggleboxes
Toggleboxes are upgraded checkboxes.  They contain their own content, which is only shown if the box is checked.


***** A Bigger Form
#+BEGIN_SRC clojure
  (ns example
   (:require [reformation.core :as rfc]))

  (def test-form [:mytext {:type :text
			   :label "My text"
			   :name-separator "_"}
		  :mytextarea {:type :textarea
			       :label "My textarea"
			       :rows 5}
		  :mymultitable  {:type :multi-table
				  :label "My multitable"
				  :id :mymulti
				  :required? true

				  :min-rows 3
				  :subtext "Indicate any expenses involved in carrying out your research, including a reason for each expense."
				  :value-path [:my-multitable]
				  :sum-field :amount
				  :columns [{:key :item
					     :title "Item"}
					    {:key :amount
					     :title "Amount"
					     :input-type "number"}
					    {:key :purpose
					     :title "Purpose"
					     :input-type "textarea"}]}
		  :mytoggle {:type :togglebox
			     :label "My togglebox"
			     :content [:test {:type :text :label "My toggled "}]}
		  :mycheckbox {:type :checkbox :label "My checkbox"}
		  :myfileupload {:type :file
				 :label "My file"
				 :submit-text "Click or Drop a File Here"
				 :error-text "Maybe We had an error?"
				 :submit-fn #(js/alert "Trying to submit:")
				 :save-fn #(reset! FILE %)                               
				 :allowed-extensions-f #{"txt"}
				 :style-classes {:drag-over "dragover"
						 :inactive "undragged"
						 :have-file "have-file"}}])
#+END_SRC






** Element and Attribute Reference

*** universal keys
**** =:type=
Indicates which element to create.  Can be any of: =:select=, =:radio=, =:multi-table=, =:textarea=, =:togglebox=, =:checkbox=, =:file=, =:hidden=

**** =:subtext=
Explanatory or parenthetical text, appearing under =:label=.  Adjust style by adding rules to =p.help= 

**** =:validation-function=
Should be a predicate function that takes a value and determines whether it is a valid input for that form element

**** =:invalid-feedback=
If the input doesn't satisfy the validation function, this string will appear explaining why

**** =:required?=
A boolean flag indicating whether the element is required for form submission.  Not applicable to  =togglebox or =multi-table=

**** =:default-value= 
If you wish to set a default value, put it here
     
**** =:disabled=
A binary flag for whether the element will be disabled

**** =:id= 
 the =id= of the resulting element
**** =:style-classes=
Is set as =:class= of the resulting element


** Elements

*** =:select=
**** =:options= a sequence of options from which the user can select one.  Each option has =:content= and =:value= attributes; you can provide a map with the appropriate keys or a string (in which case it will be used in both attributes).  If one key is missing, the value of the other will be used.
*** =:radio= 
**** =:options= a sequence of options from which the user can select one.  Each option has =:content= and =:value= attributes; you can provide a map with the appropriate keys or a string (in which case it will be used in both attributes).  If one key is missing, the value of the other will be used.
*** =:textarea=

 =:placeholder= as the HTML attribute.

=:value= as the html attribute

=:char-count= a map with two keys, =:limit= and =:enforce?=.  =:limit= is a character count limit and should be an integer, =:enforce?= is a boolean.


*** =:checkbox=
a checkbox.

*** =:file=
**** =:submit-text= Text instructing the user how to submit a file.  Defaults to  "Click or Drop a File Here"
**** =:submit-button= a 
**** =:submit-fn=
**** =:save-fn= should be a fn of one argument, the file
**** =:allowed-extensions-f= a set of strings, each representing a file extension, e.g. #{"txt" "doc"}


  [{:keys [ submit-text submit-fn error-text submit-button ]
    :or {submit-text "Click or Drop a File Here"}
    {:keys [drag-over inactive have-file]
     :or {drag-over "dragover"
          inactive "undragged"
          have-file "have-file"}} :style-classes
    :as opt-map}]



*** =:togglebox= 

**** =:content= The contents of a togglebox.  Should be in the same form as a form description vector, i.e. a vector alternating between keys and element-description maps.

  override-inline? not sure

  open-height ---dictates height when open, is passed directly to =:height= in CSS.  Should be a string value


*** =:multi-table=
An expandable table.  A common task for forms is a list of an indefinite number of elements---expenses, group members, prior positions, etc.  
**** =:min-rows= The minimum acceptable number of rows.  Not required.
**** =:sum-field= the name of the field to sum
**** =:columns= a vector of maps (?).  Each column is represented by a map with keys:
***** =:key= the =key= attribute React uses to order the columns.  If none is provided, =:title= will be used
***** =:title= Title of the column
***** =:input-type= The input element.  All elements used outside of multitable (except =:file=, =:togglebox=, and 
***** =:column-class= is added to the =:class= of the column
***** =:input-class= is added to the =:class= of the input elements
***** =:disabled= Set this to =true= to disable the column.  Defaults to =false=
***** =:placeholder= For text inputs, the =placeholder= attribute
***** =:default-value= For text inputs, the initial value
*** hidden

** TODO "required" on regular input
** TODO Format fn for date fields
** TODO Default values for select boxes
** Validation
#+BEGIN_SRC clojure
(rfc/check-form-validation)
#+END_SRC
A predicate function that will check the validity of every element in your form. Returns false if any do not pass the validation requirements.
Currently supports the use of one form per page. 


#+BEGIN_SRC clojure
(ns example
   (:require [reformation.core :as rfc]))

(def f1 #(if (> (count %) 5)
                 true
                 nil))

(def text-form [:example-element {:type :text
                                  	:validation-function f1
                                  	:invalid-feedback "Needs more than 5 characters..."
                                  	:label "Enter more than 5 characters"	
                                  	:id "example1"})

(defn save-button
  []
	[:a.button {:id "submit"
               :title "Submit form"
               :on-click #(if (rfc/check-form-validation)
                            (js/alert "Passed")
                            (js/alert "Failed"))            
               :href nil} "Submit"]])
#+END_SRC

** Prerequisites
   :PROPERTIES:
   :CUSTOM_ID: prerequisites
   :END:

None. Just use this library.

** License
   :PROPERTIES:
   :CUSTOM_ID: license
   :END:

Copyright Â© 2018 Tory S. Anderson
